//===-- MYRISCVXSubtarget.h - Define Subtarget for the MYRISCVX ---*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===-----------------------------------------------------------------------===//
//
// This file declares the MYRISCVX specific subclass of TargetSubtargetInfo.
//
//===-----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_MYRISCVX_MYRISCVXSUBTARGET_H
#define LLVM_LIB_TARGET_MYRISCVX_MYRISCVXSUBTARGET_H

#include "MYRISCVXFrameLowering.h"
#include "MYRISCVXISelLowering.h"
#include "MYRISCVXInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "MYRISCVXGenSubtargetInfo.inc"

namespace llvm {
  class StringRef;

  class MYRISCVXTargetMachine;

  class MYRISCVXSubtarget : public MYRISCVXGenSubtargetInfo {
    virtual void anchor();

 public:

    bool HasChapterDummy;
    bool HasChapterAll;

    bool hasChapter3_1() const {
#if CH >= CH3_1
      return true;
#else
      return false;
#endif
    }

    bool hasChapter3_2() const {
#if CH >= CH3_2
      return true;
#else
      return false;
#endif
    }

    bool hasChapter3_3() const {
#if CH >= CH3_3
      return true;
#else
      return false;
#endif
    }

    bool hasChapter3_4() const {
#if CH >= CH3_4
      return true;
#else
      return false;
#endif
    }

    bool hasChapter3_5() const {
#if CH >= CH3_5
      return true;
#else
      return false;
#endif
    }

    bool hasChapter4_1() const {
#if CH >= CH4_1
      return true;
#else
      return false;
#endif
    }

    bool hasChapter4_2() const {
#if CH >= CH4_2
      return true;
#else
      return false;
#endif
    }

    bool hasChapter5_1() const {
#if CH >= CH5_1
      return true;
#else
      return false;
#endif
    }

    bool hasChapter6_1() const {
#if CH >= CH6_1
      return true;
#else
      return false;
#endif
    }

    bool hasChapter7_1() const {
#if CH >= CH7_1
      return true;
#else
      return false;
#endif
    }

    bool hasChapter8_1() const {
#if CH >= CH8_1
      return true;
#else
      return false;
#endif
    }

    bool hasChapter8_2() const {
#if CH >= CH8_2
      return true;
#else
      return false;
#endif
    }

    bool hasChapter9_1() const {
#if CH >= CH9_1
      return true;
#else
      return false;
#endif
    }

    bool hasChapter9_2() const {
#if CH >= CH9_2
      return true;
#else
      return false;
#endif
    }

    bool hasChapter9_3() const {
#if CH >= CH9_3
      return true;
#else
      return false;
#endif
    }

    bool hasChapter10_1() const {
#if CH >= CH10_1
      return true;
#else
      return false;
#endif
    }

    bool hasChapter11_1() const {
#if CH >= CH11_1
      return true;
#else
      return false;
#endif
    }

    bool hasChapter11_2() const {
#if CH >= CH11_2
      return true;
#else
      return false;
#endif
    }

    bool hasChapter12_1() const {
#if CH >= CH12_1
      return true;
#else
      return false;
#endif
    }

 protected:
    enum MYRISCVXArchEnum {
      MYRISCVX32I,
      MYRISCVX32II
    };

    // MYRISCVX architecture version
    MYRISCVXArchEnum MYRISCVXArchVersion;

    // IsLittle - The target is Little Endian
    bool IsLittle;

    bool EnableOverflow;

    // HasCmp - cmp instructions.
    bool HasCmp;

    // HasSlt - slt instructions.
    bool HasSlt;

    InstrItineraryData InstrItins;


    const MYRISCVXTargetMachine &TM;

    Triple TargetTriple;

    const SelectionDAGTargetInfo TSInfo;

    std::unique_ptr<const MYRISCVXInstrInfo> InstrInfo;
    std::unique_ptr<const MYRISCVXFrameLowering> FrameLowering;
    std::unique_ptr<const MYRISCVXTargetLowering> TLInfo;

 public:
    bool isPositionIndependent() const;
    const MYRISCVXABIInfo &getABI() const;

    /// This constructor initializes the data members to match that
    /// of the specified triple.
    MYRISCVXSubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
                      bool little, const MYRISCVXTargetMachine &_TM);

    //- Vitual function, must have
    /// ParseSubtargetFeatures - Parses features string setting specified
    /// subtarget options.  Definition of function is auto generated by tblgen.
    void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

    bool isLittle() const { return IsLittle; }
    bool hasMYRISCVX32I() const { return MYRISCVXArchVersion >= MYRISCVX32I; }
    bool isMYRISCVX32I() const { return MYRISCVXArchVersion == MYRISCVX32I; }
    bool hasMYRISCVX32II() const { return MYRISCVXArchVersion >= MYRISCVX32II; }
    bool isMYRISCVX32II() const { return MYRISCVXArchVersion == MYRISCVX32II; }

    /// Features related to the presence of specific instructions.
    bool enableOverflow() const { return EnableOverflow; }
    bool disableOverflow() const { return !EnableOverflow; }
    bool hasCmp()   const { return HasCmp; }
    bool hasSlt()   const { return HasSlt; }


    bool abiUsesSoftFloat() const;

    bool enableLongBranchPass() const {
      return hasMYRISCVX32II();
    }

    unsigned stackAlignment() const { return 8; }

    MYRISCVXSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                       const TargetMachine &TM);

    const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
      return &TSInfo;
    }
    const MYRISCVXInstrInfo *getInstrInfo() const override { return InstrInfo.get(); }
    const TargetFrameLowering *getFrameLowering() const override {
      return FrameLowering.get();
    }
    const MYRISCVXRegisterInfo *getRegisterInfo() const override {
      return &InstrInfo->getRegisterInfo();
    }
    const MYRISCVXTargetLowering *getTargetLowering() const override {
      return TLInfo.get();
    }
    const InstrItineraryData *getInstrItineraryData() const override {
      return &InstrItins;
    }
  };
} // End llvm namespace


#endif
